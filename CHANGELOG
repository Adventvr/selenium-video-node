Version 0.8 (unreleased)
======================

* Added pre-compiled binaries for OS X
* Change the API for IVideoStore to also include requested capabilities + node capabilities when storing the job. This is intended
for use when integrating with custom job reporting code.

Version 0.7 20/06/2014
======================

* Added experimental support for Windows x86 (32-bit). I don't have a 32-bit JVM on-hand to test that the native code works.
* Wrote a plugin to make how we store videos be extensible
  * LocalTempFileStore - the pre-existing storage mechanism
  * LocalFileVideoStore - permanent storage in a directory
  * BasicWebDAVStore - permanent storage in a WebDAV directory on a webserver
* Added HubVideoInfoServlet to provide storage-plugin specific information about where a video is kept

Version 0.6 26/05/2014
======================

* Fixed an issue where videos were not immediately available after the session was closed - only after the Hub had finished tidying up the node. We now immediately transfer the video to the Hub.

Version 0.5 03/05/2014
======================

* Make the target framerate be configurable
* Fix a playback framerate issue when the video wasn't recorded fast enough (was playing too fast)
* Recompile binaries on glibc 2.13, because not all Linux installations have 2.17

Version 0.4 21/04/2014
======================

* Commit some pre-built linux binaries to Git.
* Make Maven assemble the native code zip file.
* Added support for Windows x86_64 - committed some binaries for it (details on wiki). Note that this requires a 64 bit JVM to work.

Version 0.3 18/04/2014
======================

* Move the compiled MKV encoder code out into its own library, where it should be.
* Fix C memory leak by actually freeing up memory.


Version 0.2 15/04/2014
======================

Convert project to use a WebM/VP8 encoder - we now use JNA to run the encoder, with a C implementation to abstract away the complicated C data structures.

 * Higher framerates achieved
 * Capped framerate at 8 fps, slightly slower than the maximum speed, due to continuing time-base issues
 * Implementation now restricted to Linux-only.


Version 0.1 08/04/2014n
======================

Initial implementation. Used a Java implementation of an h264 encoder. It centralized videos on the Hub using some download servlets, and allowed the user to get the video.

 * The encoder wasn't very fast (~4 fps, with the Java Robot taking screenshots)
 * The videos generated were massive
 * Some time-base issues
 * Some browsers/players refused to play back the video
 * Patent issues for encoding h264

